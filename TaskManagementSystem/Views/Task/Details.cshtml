@model TaskManagementSystem.Models.TaskItem
@{
    ViewData["Title"] = "Task Details";
}

<div class="row">
    <div class="col-lg-8">
        <div class="card shadow mb-4">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0">
                    <i class="fas fa-eye me-2"></i>Task Details
                </h4>
                <div>
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-light btn-sm">
                        <i class="fas fa-edit me-1"></i>Edit
                    </a>
                    <a asp-action="Index" class="btn btn-light btn-sm">
                        <i class="fas fa-arrow-left me-1"></i>Back
                    </a>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h3 class="mb-3">@Model.Title</h3>
                        <p class="text-muted mb-4">@Model.Description</p>
                    </div>
                    <div class="col-md-4">
                        <div class="d-flex flex-column gap-2">
                            <span class="badge @GetStatusClass(Model.Status) fs-6">@Model.Status</span>
                            <span class="badge @GetPriorityClass(Model.Priority) fs-6">@Model.Priority</span>
                            <span class="badge bg-secondary fs-6">@Model.Category</span>
                        </div>
                    </div>
                </div>

                <hr>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <strong><i class="fas fa-calendar me-2"></i>Deadline:</strong>
                            <span class="@(Model.Deadline < DateTime.Now && Model.Status != TaskManagementSystem.Models.TaskStatus.Done ? "text-danger" : "")">
                                @Model.Deadline.ToString("MMM dd, yyyy HH:mm")
                            </span>
                            @if (Model.Deadline < DateTime.Now && Model.Status != TaskManagementSystem.Models.TaskStatus.Done)
                            {
                                <span class="badge bg-danger ms-2">Overdue</span>
                            }
                        </div>
                        <div class="mb-3">
                            <strong><i class="fas fa-user me-2"></i>Created by:</strong>
                            <span>@Model.CreatedBy.FirstName @Model.CreatedBy.LastName</span>
                        </div>
                        @if (Model.AssignedTo != null)
                        {
                            <div class="mb-3">
                                <strong><i class="fas fa-user-check me-2"></i>Assigned to:</strong>
                                <span>@Model.AssignedTo.FirstName @Model.AssignedTo.LastName</span>
                            </div>
                        }
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <strong><i class="fas fa-clock me-2"></i>Created:</strong>
                            <span>@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                        </div>
                        @if (Model.CompletedAt.HasValue)
                        {
                            <div class="mb-3">
                                <strong><i class="fas fa-check-circle me-2"></i>Completed:</strong>
                                <span class="text-success">@Model.CompletedAt.Value.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Task Updates -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-comments me-2"></i>Updates & Comments
                </h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <form id="updateForm" class="d-flex gap-2">
                        <input type="hidden" id="taskId" value="@Model.Id" />
                        <input type="text" id="updateText" class="form-control" placeholder="Add an update or comment..." required />
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-plus me-1"></i>Add Update
                        </button>
                    </form>
                </div>

                <div id="updatesList">
                    @if (Model.Updates.Any())
                    {
                        foreach (var update in Model.Updates)
                        {
                            <div class="border-start border-primary ps-3 mb-3">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <strong>@update.User.FirstName @update.User.LastName</strong>
                                        <small class="text-muted ms-2">@update.CreatedAt.ToString("MMM dd, yyyy HH:mm")</small>
                                    </div>
                                </div>
                                <p class="mb-0 mt-1">@update.UpdateText</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">No updates yet. Be the first to add one!</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <!-- Files Section -->
        <div class="card shadow mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-paperclip me-2"></i>Attachments (@Model.Files.Count)
                </h5>
            </div>
            <div class="card-body">
                @if (Model.Files.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var file in Model.Files)
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="fas fa-file me-2"></i>
                                    <span>@file.FileName</span>
                                    <br>
                                    <small class="text-muted">@(file.FileSize / 1024) KB â€¢ @file.UploadedAt.ToString("MMM dd, yyyy")</small>
                                </div>
                                <a asp-action="Download" asp-route-id="@file.Id" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-download"></i>
                                </a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted text-center py-3">No files attached</p>
                }
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="card shadow">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-bolt me-2"></i>Quick Actions
                </h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                        <i class="fas fa-edit me-2"></i>Edit Task
                    </a>
                    <form asp-action="Delete" asp-route-id="@Model.Id" method="post" style="display: inline;">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger w-100" 
                                onclick="return confirm('Are you sure you want to delete this task?')">
                            <i class="fas fa-trash me-2"></i>Delete Task
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#updateForm').on('submit', function(e) {
                e.preventDefault();
                
                var taskId = $('#taskId').val();
                var updateText = $('#updateText').val();
                
                if (!updateText.trim()) {
                    return;
                }
                
                $.post('/Task/AddUpdate', { taskId: taskId, updateText: updateText })
                    .done(function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert('Error adding update: ' + response.message);
                        }
                    })
                    .fail(function() {
                        alert('Error adding update. Please try again.');
                    });
            });
        });
    </script>
}

@functions {
    string GetStatusClass(TaskManagementSystem.Models.TaskStatus status)
    {
        return status switch
        {
            TaskManagementSystem.Models.TaskStatus.Pending => "bg-secondary",
            TaskManagementSystem.Models.TaskStatus.InProgress => "bg-primary",
            TaskManagementSystem.Models.TaskStatus.Done => "bg-success",
            TaskManagementSystem.Models.TaskStatus.Blocked => "bg-danger",
            TaskManagementSystem.Models.TaskStatus.Stuck => "bg-warning",
            _ => "bg-secondary"
        };
    }
    
    string GetPriorityClass(TaskManagementSystem.Models.TaskPriority priority)
    {
        return priority switch
        {
            TaskManagementSystem.Models.TaskPriority.Critical => "bg-danger",
            TaskManagementSystem.Models.TaskPriority.High => "bg-warning",
            TaskManagementSystem.Models.TaskPriority.Medium => "bg-info",
            TaskManagementSystem.Models.TaskPriority.Low => "bg-success",
            _ => "bg-secondary"
        };
    }
} 