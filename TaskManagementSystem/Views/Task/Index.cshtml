@model IEnumerable<TaskManagementSystem.Models.TaskItem>
@{
    ViewData["Title"] = "Tasks";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-tasks me-2"></i>Task Management</h2>
    <a asp-action="Create" class="btn btn-primary">
        <i class="fas fa-plus me-2"></i>Create New Task
    </a>
</div>

<!-- Search and Filter Section -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-4">
                <label for="searchString" class="form-label">Search</label>
                <input type="text" class="form-control" id="searchString" name="searchString" 
                       value="@ViewBag.SearchString" placeholder="Search tasks...">
            </div>
            <div class="col-md-3">
                <label for="categoryFilter" class="form-label">Category</label>
                <select class="form-select" id="categoryFilter" name="categoryFilter">
                    <option value="">All Categories</option>
                    @foreach (var category in ViewBag.Categories)
                    {
                        if (ViewBag.CategoryFilter == category.ToString())
                        {
                            <option value="@category" selected>@category</option>
                        }
                        else
                        {
                            <option value="@category">@category</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="statusFilter" class="form-label">Status</label>
                <select class="form-select" id="statusFilter" name="statusFilter">
                    <option value="">All Statuses</option>
                    @foreach (var status in ViewBag.Statuses)
                    {
                        if (ViewBag.StatusFilter == status.ToString())
                        {
                            <option value="@status" selected>@status</option>
                        }
                        else
                        {
                            <option value="@status">@status</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-primary me-2">
                    <i class="fas fa-search me-1"></i>Filter
                </button>
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="fas fa-times me-1"></i>Clear
                </a>
            </div>
        </form>
    </div>
</div>

<!-- Tasks List -->
<div class="row">
    @foreach (var task in Model)
    {
        <div class="col-md-6 col-lg-4 mb-4">
            <div class="card h-100 @GetPriorityClass(task.Priority)">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span class="badge @GetStatusClass(task.Status)">@task.Status</span>
                    <span class="badge @GetPriorityBadgeClass(task.Priority)">@task.Priority</span>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@task.Title</h5>
                    <p class="card-text text-muted">@(task.Description.Length > 100 ? task.Description.Substring(0, 100) + "..." : task.Description)</p>
                    
                    <div class="mb-3">
                        <small class="text-muted">
                            <i class="fas fa-tag me-1"></i>@task.Category
                        </small>
                    </div>
                    
                    <div class="mb-3">
                        <small class="text-muted">
                            <i class="fas fa-calendar me-1"></i>Deadline: @task.Deadline.ToString("MMM dd, yyyy")
                        </small>
                        @if (task.Deadline < DateTime.Now && task.Status != TaskManagementSystem.Models.TaskStatus.Done)
                        {
                            <span class="badge bg-danger ms-2">Overdue</span>
                        }
                    </div>
                    
                    <div class="mb-3">
                        <small class="text-muted">
                            <i class="fas fa-user me-1"></i>Created by: @task.CreatedBy.FirstName @task.CreatedBy.LastName
                        </small>
                    </div>
                    
                    @if (task.AssignedTo != null)
                    {
                        <div class="mb-3">
                            <small class="text-muted">
                                <i class="fas fa-user-check me-1"></i>Assigned to: @task.AssignedTo.FirstName @task.AssignedTo.LastName
                            </small>
                        </div>
                    }
                    
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            @if (task.Files.Any())
                            {
                                <span class="badge bg-info me-2">
                                    <i class="fas fa-paperclip me-1"></i>@task.Files.Count Files
                                </span>
                            }
                            @if (task.Updates.Any())
                            {
                                <span class="badge bg-secondary">
                                    <i class="fas fa-comments me-1"></i>@task.Updates.Count Updates
                                </span>
                            }
                        </div>
                        <div class="btn-group" role="group">
                            <a asp-action="Details" asp-route-id="@task.Id" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-outline-warning">
                                <i class="fas fa-edit"></i>
                            </a>
                            <form asp-action="Delete" asp-route-id="@task.Id" method="post" style="display: inline;">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-sm btn-outline-danger" 
                                        onclick="return confirm('Are you sure you want to delete this task?')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No tasks found</h4>
        <p class="text-muted">Create your first task to get started!</p>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Create Task
        </a>
    </div>
}

@functions {
    string GetPriorityClass(TaskManagementSystem.Models.TaskPriority priority)
    {
        return priority switch
        {
            TaskManagementSystem.Models.TaskPriority.Critical => "border-danger",
            TaskManagementSystem.Models.TaskPriority.High => "border-warning",
            TaskManagementSystem.Models.TaskPriority.Medium => "border-info",
            TaskManagementSystem.Models.TaskPriority.Low => "border-success",
            _ => ""
        };
    }
    
    string GetStatusClass(TaskManagementSystem.Models.TaskStatus status)
    {
        return status switch
        {
            TaskManagementSystem.Models.TaskStatus.Pending => "bg-secondary",
            TaskManagementSystem.Models.TaskStatus.InProgress => "bg-primary",
            TaskManagementSystem.Models.TaskStatus.Done => "bg-success",
            TaskManagementSystem.Models.TaskStatus.Blocked => "bg-danger",
            TaskManagementSystem.Models.TaskStatus.Stuck => "bg-warning",
            _ => "bg-secondary"
        };
    }
    
    string GetPriorityBadgeClass(TaskManagementSystem.Models.TaskPriority priority)
    {
        return priority switch
        {
            TaskManagementSystem.Models.TaskPriority.Critical => "bg-danger",
            TaskManagementSystem.Models.TaskPriority.High => "bg-warning",
            TaskManagementSystem.Models.TaskPriority.Medium => "bg-info",
            TaskManagementSystem.Models.TaskPriority.Low => "bg-success",
            _ => "bg-secondary"
        };
    }
} 